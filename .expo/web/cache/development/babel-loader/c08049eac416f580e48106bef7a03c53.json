{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/willdavis/Documents/Projects/photo_app/src/screens/ColorScreen.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\n\nvar ColorScreen = function ColorScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      colors = _useState2[0],\n      setColors = _useState2[1];\n\n  console.log(colors);\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    title: \"Add a Color\",\n    onPress: function onPress() {\n      setColors([].concat(_toConsumableArray(colors), [randomRgb()]));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }), React.createElement(FlatList, {\n    keyExtractor: function keyExtractor(item) {\n      return item;\n    },\n    data: colors,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        style: {\n          height: 100,\n          width: 100,\n          backgroundColor: item\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 18\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar randomRgb = function randomRgb() {\n  var red = Math.floor(Math.random() * 256);\n  var green = Math.floor(Math.random() * 256);\n  var blue = Math.floor(Math.random() * 256);\n  return \"rgb(\" + red + \", \" + green + \", \" + blue + \")\";\n};\n\nvar styles = StyleSheet.create({});\nexport default ColorScreen;","map":{"version":3,"sources":["/Users/willdavis/Documents/Projects/photo_app/src/screens/ColorScreen.js"],"names":["React","useState","ColorScreen","colors","setColors","console","log","randomRgb","item","height","width","backgroundColor","red","Math","floor","random","green","blue","styles","StyleSheet","create"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAW;AAAA,kBACDD,QAAQ,CAAC,EAAD,CADP;AAAA;AAAA,MACtBE,MADsB;AAAA,MACdC,SADc;;AAE7BC,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AAEA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,aAAd;AAA4B,IAAA,OAAO,EAAE,mBAAK;AACxCC,MAAAA,SAAS,8BAAKD,MAAL,IAAaI,SAAS,EAAtB,GAAT;AACD,KAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAIE,oBAAC,QAAD;AACE,IAAA,YAAY,EAAE,sBAACC,IAAD;AAAA,aAAUA,IAAV;AAAA,KADhB;AAEE,IAAA,IAAI,EAAEL,MAFR;AAGE,IAAA,UAAU,EAAE,0BAAc;AAAA,UAAXK,IAAW,QAAXA,IAAW;AACxB,aAAO,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE,GAAV;AAAeC,UAAAA,KAAK,EAAE,GAAtB;AAA2BC,UAAAA,eAAe,EAAEH;AAA5C,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAED,KANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAeD,CAnBD;;AAqBA,IAAMD,SAAS,GAAG,SAAZA,SAAY,GAAU;AAC1B,MAAMK,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,CAAZ;AACA,MAAMC,KAAK,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,CAAd;AACA,MAAME,IAAI,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,CAAb;AAEA,kBAAcH,GAAd,UAAsBI,KAAtB,UAAgCC,IAAhC;AACD,CAND;;AAQA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf;AAEA,eAAelB,WAAf","sourcesContent":["import React, { useState } from 'react';\nimport { View, StyleSheet, Button, FlatList } from 'react-native';\n\nconst ColorScreen = function() {\n  const [colors, setColors] = useState([]);\n  console.log(colors)\n\n  return (\n    <View>\n      <Button title=\"Add a Color\" onPress={()=> {\n        setColors([...colors, randomRgb()]); //... means take a copy of everything currently in that array and make a new one after the comma\n      }}/>\n      <FlatList \n        keyExtractor={(item) => item}\n        data={colors}\n        renderItem={({ item }) => {\n          return <View style={{ height: 100, width: 100, backgroundColor: item }} />\n\n        }}\n      />\n    </View>\n  );\n};\n\nconst randomRgb = function(){\n  const red = Math.floor(Math.random()*256)\n  const green = Math.floor(Math.random()*256)\n  const blue = Math.floor(Math.random()*256)\n\n  return `rgb(${red}, ${green}, ${blue})`\n}\n\nconst styles = StyleSheet.create({});\n\nexport default ColorScreen;"]},"metadata":{},"sourceType":"module"}